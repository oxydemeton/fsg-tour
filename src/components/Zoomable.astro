---
---

<div class="zoomable-astro max-h-[80svh] w-[90vw] overflow-scroll">
    <button type="button" class="zoomable-astro-dec">-</button>
    <div class="zoomable-astro-indicator inline">Zoom: 100%</div>
    <button type="button" class="zoomable-astro-inc">+</button>
    <div class="zoomable-astro-inner border-1 border-highlight">
        <slot/>
    </div>
</div>

<style>
    .zoomable-astro {
        @media (pointer: coarse) {
            .zoomable-astro-inner{
                max-width: 100% !important;
                max-height: 100% !important;
            }
            .zoomable-astro-indicator, &>button {
                display: none;
            }
        }
        &>button {
            cursor: pointer;
            padding-inline: 1ch;
        }
    }
</style>


<script>
    let divs = document.querySelectorAll("div.zoomable-astro")
    const mobile = window.matchMedia("(pointer: fine)")
    let abortController: AbortController | undefined;

    function apply() {
        if (mobile.matches) {
            for (let index = 0; index < divs.length; index++) {
                const elementParent = divs[index] as HTMLDivElement & {zoomLevel: number};
                const indicator = elementParent.getElementsByClassName("zoomable-astro-indicator")[0] as HTMLDivElement;
                const element = elementParent.getElementsByClassName("zoomable-astro-inner")[0] as HTMLDivElement & {zoomLevel: number}
                {
                    const storage = sessionStorage.getItem("zoom") || "0.9"
                    element.zoomLevel = parseFloat(storage)
                }
                updateZoom(0)
                if (abortController !== undefined) {
                    abortController.abort()
                    abortController = undefined
                }
                abortController = new AbortController()
                function updateZoom(delta: number) {
                    if (delta > 0) {
                        element.zoomLevel += .1
                    } else if(delta < 0) {
                        element.zoomLevel -= .1
                    }
                    if (element.zoomLevel <= 0) {
                        element.zoomLevel = .1
                    }
                    element.zoomLevel = Math.round(element.zoomLevel * 10) / 10
                    element.style.width = `calc(${element.zoomLevel.toString()} *100%)`
                    const formatter = new Intl.NumberFormat(navigator.language || "de-de", {style: "percent"})
                    indicator.innerText = `Zoom: ${formatter.format(element.zoomLevel)}`

                    sessionStorage.setItem("zoom", element.zoomLevel.toString())
                    
                    console.log("scroll", element.zoomLevel)
                }
                elementParent.addEventListener("wheel", (event)=>{
                    if (!(event.shiftKey || event.ctrlKey)) {
                        event.preventDefault()
                        //@ts-ignore Does not know wheeldata which does exist as an int 
                        const delta = event.wheelDelta as number;
                        updateZoom(delta)
                    }
                }, {signal: abortController!.signal});

                const decrementButton = elementParent.getElementsByClassName("zoomable-astro-dec")[0] as HTMLButtonElement
                decrementButton.addEventListener("click", ()=>{
                    updateZoom(-1)
                }, {signal: abortController.signal})
                const increment = elementParent.getElementsByClassName("zoomable-astro-inc")[0] as HTMLButtonElement
                increment.addEventListener("click", ()=>{                    
                    updateZoom(1)
                }, {signal: abortController.signal})
            }
        } else {
            if (abortController !== undefined) {
                abortController.abort()
                abortController = undefined
            }
        }
    }
    mobile.onchange = ()=> {
        apply()
    }
    apply()

    //Rerun on client navigation
    document.addEventListener("astro:page-load", ()=>{
        abortController?.abort()
        abortController = undefined
        divs = document.querySelectorAll("div.zoomable-astro")
        apply()
    })
</script>